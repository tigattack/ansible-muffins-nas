- name: Ensure base mount point exists
  ansible.builtin.file:
    path: "/mnt/btrfs-root"
    state: directory

- name: Ensure mount point directories exist
  ansible.builtin.file:
    path: "/mnt/btrfs-root/{{ item | basename }}"
    state: directory
  loop: "{{ data_disks }}"
  loop_control:
    label: "{{ item }}"

- name: Check if the filesystem is already mounted
  ansible.builtin.shell:
    cmd: "mount | grep /mnt/btrfs-root/{{ item | basename }}"
  register: mount_check
  loop: "{{ data_disks }}"
  loop_control:
    label: "{{ item }}"
  ignore_errors: yes
  changed_when: false

- name: Mount the main Btrfs filesystem partition
  ansible.builtin.command:
    cmd: "mount -t btrfs {{ item }}-part1 /mnt/btrfs-root/{{ item | basename }}"
  loop: "{{ data_disks }}"
  loop_control:
    label: "{{ item }}"
  when: mount_check.results | selectattr('rc', 'equalto', 1) | list | length > 0

- name: Check if data subvolume exists
  shell: "btrfs subvolume list /mnt/btrfs-root/{{ item | basename }} | grep data"
  loop: "{{ data_disks }}"
  register: subvolume_check
  ignore_errors: true

- name: Create Btrfs data subvolume using command
  command: "btrfs subvolume create /mnt/btrfs-root/{{ item.item | basename }}/data"
  loop: "{{ subvolume_check.results }}"
  when: "'data' not in item.stdout"
  loop_control:
    label: "{{ item }}"
  ignore_errors: yes

- name: Unmount the fs
  command: "umount /mnt/btrfs-root/{{ item | basename }}"
  loop: "{{ data_disks }}"
  loop_control:
    label: "{{ item }}"

- name: Remove individual mount points
  ansible.builtin.file:
    path: "/mnt/btrfs-root/{{ item | basename }}"
    state: absent
  loop: "{{ data_disks }}"
  loop_control:
    label: "{{ item }}"
